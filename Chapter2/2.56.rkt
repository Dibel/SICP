#lang scheme

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((exponentiation? exp)
         (make-product
          (make-product (exponent exp) (deriv (base exp) var))
          (make-exponentiation (base exp)
                               (exponent exp))))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else
         (error "unknown expression type -- DERIV" exp))))

; exponentiation
(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base exp) (cadr exp))
(define (exponent exp) (caddr exp))
(define (make-exponentiation base e)
  (cond ((=number? e 1) 1)
        ((=number? e 2) base)
        ((and (number? e) (number? base))
         (fast-expt base (- e 1)))
        ((number? e) (list '** base (- e 1)))
        (else (list '** base (list '- e 1)))))

(define (variable? x) (symbol? x))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (=number? a1 a2)
  (and (number? a1) (= a1 a2)))

(define (addend exp) (cadr exp))
(define (augend exp) (caddr exp))
(define (multiplier exp) (cadr exp))
(define (multiplicand exp) (caddr exp))

(define (fast-expt b n)
  (fastexpt-iter b n 1))

(define (fastexpt-iter b n a)
  (if (= n 0)
      a
      (if (even? n)
          (fastexpt-iter (square b) (/ n 2) a)
          (fastexpt-iter b (- n 1) (* b a)))))

(define (square n)
  (* n n))
