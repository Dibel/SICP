#lang scheme
(require scheme/mpair)

(define cdr mcdr)
(define car mcar)
(define set-cdr! set-mcdr!)
(define set-car! set-mcar!)
(define cons mcons)
(define list mlist)
(define pair? mpair?)
(define list? mlist?)

(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)
                 (void)))
            ((eq? m 'release) (clear! cell))))
    the-mutex))

(define (clear! cell)
  (set-car! cell false))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
             false)))

; Based on mutex
(define (make-semaphore n)
  (let ((mutex (make-mutex))
        (count n)
        (max n))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (mutex 'acquire)
             (if (> count 0)
                 (begin (set! count (- count 1))
                        (mutex 'release))
                 (begin (mutex 'release)
                        (the-semaphore 'acquire))))
            ((eq? m 'release)
             (mutex 'acquire)
             (if (< count max)
                 (set! count (+ count 1))
                 (void))
             (mutex 'release))))
    the-semaphore))

; For test
(define p (make-semaphore 3))
(p 'acquire)
(p 'release)

; Based on test-and-set!
(define (make-semaphore-atom n)
  (let ((cell (list false))
        (count n)
        (max n))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-semaphore 'acquire)
                 (void))
             (if (> count 0)
                 (begin (set! count (- count 1))
                        (clear! cell))
                 (begin (clear! cell)
                        (the-semaphore 'acquire))))
            ((eq? m 'release)
             (if (test-and-set! cell)
                 (the-semaphore 'acquire)
                 (void))
             (if (< count max)
                 (set! count (+ count 1))
                 (void))
             (clear! cell))))
    the-semaphore))

; For test
(define p1 (make-semaphore-atom 3))
(p1 'acquire)
(p1 'release)